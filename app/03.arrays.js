console.log('Topic: Arrays');

// Task 01
// RU: –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤. –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞.
//     1.    –ë–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞.
//     2.    –° —É–¥–∞–ª–µ–Ω–∏–µ–º —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
//    –í—ã–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å–∏–≤—ã –≤ –∫–æ–Ω—Å–æ–ª—å
// EN: Create an array of any elements. Get the last element from this array.
//     1.    without deleting this element from an array;
//     2.    with deleting this element from an array.
//     Display them in the console.
// let arr = [1,2,5];
//
// let firstResult = arr[arr.length-1];
// let secondResult = arr.pop();
//
// console.log(firstResult);
// console.log(secondResult);
// console.log(arr);

// Task 02
// RU: –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –ª—é–±—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞.
//     1. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤
//     2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
//     –í—ã–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å–∏–≤—ã –≤ –∫–æ–Ω—Å–æ–ª—å
// EN: Create an array of any elements. Add new element to the end of this array.
//     1. mutate current array;
//     2. create a new array.
//     Disply them in the conole.
// const array = [1,2,3];
// const arrayLength = array.push(4);
// const newArr = array.concat(5);
// const newArr2 = [...newArr, 6];
//
// console.log(array);
// console.log(arrayLength);
// console.log(newArr);
// console.log(newArr2);

// const array = [1,2,3];
// const addToEnd1 = [...array, 4];
// const addToEnd2 = array.concat(4);
// const addToEnd3 = array.push(4);
// console.log(addToEnd1);
// console.log(addToEnd2);
// console.log(addToEnd3);


// Task 03
// RU: –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –ª—é–±—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –í—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º 3.
//     1. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤
//     2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
//     –í—ã–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å–∏–≤—ã –≤ –∫–æ–Ω—Å–æ–ª—å
// EN: Create an array of any elements. Insert a new element with index 3.
//     1. mutate current array;
//     2. create a new array.
//     Disply them in the conole.

// const array = [1,2,3,4];
// array.splice(3, 0, 'elem');
// const newArr = [...array.slice(0,3), 'new elem', ...array.slice(3)];
//
// console.log(array);
// console.log(newArr);

// const array = [1,2,3,4];
// array.splice(3,0,'inserted element');
// console.log(array);
// const array2 = [1,2,3,4];
// const addTo3position2 = [...array2.slice(0,3),'inserted element', ...array2.slice(3) ]
// console.log(addTo3position2);


// Task 04
// RU: –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –ª—é–±—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
//     –û–±–æ–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –∏ –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö –≤ –∫–æ–Ω—Å–æ–ª—å.
// EN: Create an array of any elements.
//     Iterate over this array and display each element in the console.

// const array = ['üëèüèª','ü§úüèª','ü§õüèª','ü§¶‚Äç‚ôÇ'];
// array.forEach(i=> console.log(i));
//
// for( let i in array) console.log(array[i]);
//
// for( let i of array) console.log(i);

// const array = [1,2,3,4];
// array.forEach(elem => console.log(elem));
// for (let index = 0; index < array.length; index++) {
//     const element = array[index];
//     console.log(element);
// }
// for (const key of array) {
//     console.log(key);
// }


// Task 05
// RU: –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 100.
//     –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∏ –≤—ã–≤–µ—Ç–∏ —Å—É–º–º—É —Ç–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ 50.
// EN: Create an array of numbers in the range from 0 to 100.
//     Calculate and display the sum of the elements, which are greater than 50.

// let accum = 0;
// let arr = [1,40, 50, 51, 100];
// arr.forEach(item => (item > 50) && ( accum += item) );
// let accum2 = arr.reduce((sum, next) => next > 50 && sum += next );
// console.log(arr);
// console.log(accum);
// console.log(accum2);

// let arr = [1, 40, 50, 51, 100];
// console.log(arr.reduce((prev, next) => next > 50 ? (prev + next) : prev + 0, 0));


// Task 06
// RU: –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫. –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É ‚Äì
//     –æ–±—ä–¥–∏–Ω–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å.
// EN: Create an array of strings. Create a string on the basis of this array.
//     This string should contain all elements from an array separated by certain delimeter.

const compliance = ['It\'s','time','to','go','on','grooming',':('];
console.log(compliance.join(' '));



// Task 07
// RU: –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 20 –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
//     –û—Çc–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é. –í—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
//     –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤, –æ—Ç—Å–æ—Ä—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// EN: Create an array of numbers in the range from 1 to 20 in random order.
//     Sort this array in ascending order. Display it in the console.
//     Create a copy of the previous array in reverse order. Disply it in the console.


// Task 08
// RU: –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ [3, 0, -1, 12, -2, -4, 0, 7, 2]
//     –ù–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ [-1, -2, -4, 0, 0, 3, 12, 7, 2].
//     –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ
//     –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å - –Ω—É–ª–∏
//     —Ç—Ä–µ—Ç—å—è —á–∞—Å—Ç—å - –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ.
// EN: Create the array: [3, 0, -1, 12, -2, -4, 0, 7, 2]
//     Use this array and create new one: [-1, -2, -4, 0, 0, 3, 12, 7, 2].
//     First part - negative values from the original array in the same order,
//     Next part - zeroes
//     Last part - positive values from the original array in the same order.

// Task 09
// RU: 1. –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ styles —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ "Jazz", "Blues".
//     2. –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü –∑–Ω–∞—á–µ–Ω–∏–µ "Rock-n-Roll".
//     3. –ó–∞–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –∫–æ–Ω—Ü–∞ –Ω–∞ "Classics".
//     4. –£–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
//     5. –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ "Rap" –∏ "Reggae".
//     6. –í—ã–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å–∏–≤ –≤ –∫–æ–Ω—Å–æ–ª—å.
// EN: 1. Create an array styles with two elements "Jazz", "Blues".
//     2. Add new element "Rock-n-Roll" to the end of the array.
//     3. Replace the last but one element with new value "Classics".
//     4. Remove the first element from the array and disply it in the console.
//     5. Add two new elements "Rap" and "Reggae" at the begining of the array.
//     6. Display an array in the console.

// Task 10
// RU: –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫–µ "dskjdhfkjshdfkjhsdkjureyteiruyiqywehjkh"
//     –æ—Ç–¥–µ–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ r, k, t –∏ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.
// EN: Calculate the number of letters r, k, t in this string
//     "dskjdhfkjshdfkjhsdkjureyteiruyiqywehjkh" and display them in the console.

// let results = {
//     r: 0,
//     k: 0,
//     t: 0
// };

// [..."dskjdhfkjshdfkjhsdkjureyteiruyiqywehjkh"]
//     .forEach(item => {
//         if(item === 'r') {
//             results.r++
//         }else if(item === 'k'){
//             results.k++
//         } else if(item === 't') {
//             results.t++
//         }
//     })

// console.log(`
// Amount of letter r: ${results.r};
// Amount of letter k: ${results.k};
// Amount of letter t: ${results.t};
// `)

// Task 11
// RU: –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –ª—é–±—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
//     –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// EN: Create an array of any elements.
//     Get the random element from this array and display it in the console.

// const array = ['first', 'second', 'third'];
// const item = array[Math.floor (Math.random() * array.length)];
// console.log(item);

// Task 12
// RU: –°–æ–∑–¥–∞—Ç—å –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤:
//     1 2 3
//     4 5 6
//     7 8 9
//     –í—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// EN: Create two-dementional array:
//     1 2 3
//     4 5 6
//     7 8 9
//     Display it in the console.

// const array = [
//     [1,2,3],
//     [4,5,6],
//     [7,8,9]
// ]

// array.forEach(item=>console.log(item.join(' ')));

// Task 13
// RU: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π.
//     –í—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// EN: Transform an array from the previous task into one-dementional array.
//     Display it in the console.

// const array = [
//     [1,2,3],
//     [4,5,6],
//     [7,8,9]
// ]

// const newArr = []
// array.map(item => newArr.push(...item));
// console.log(newArr);


// Task 14
// RU: –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –ª—é–±—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
//     –ù–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ ‚Äì –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
//     –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –Ω–∞—á–∏–Ω–∞—è —Å –∏–Ω–¥–µ–∫—Å–∞ a –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—è –∏–Ω–¥–µ–∫—Å–æ–º b.
//     –í—ã–≤–µ—Å—Ç–∏ –º–∞—Å—Å–∏–≤ –≤ –∫–æ–Ω—Å–æ–ª—å.
// EN: Create an array of any elements.
//     Create new one on the basis of the originl array. New array should
//     contain elements from index a to index b.
//     Display it in the console.

// Task 15
// RU: –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –ª—é–±—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
//     –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —É–∫–∞–∑–∞–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// EN: Create an array of any elements.
//     Find the index of a particular element in the array and disply it in the console.

// let arr = [{id: 2}, {id: 9}, {id: 19}];
// console.log(arr.findIndex(item => item.id === 9));

// Task 16
// RU: –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å –¥—É–±–ª—è–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ù–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
//     —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏).
//     –í—ã–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –≤ –∫–æ–Ω—Å–æ–ª—å.
// EN: Create an array with duplicate elements. Create new one on the basis of the originl array.
//     Remove duplicated elements.
//     Display it in the console.

// Task 17
// RU: –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å –¥—É–±–ª—è–º–∏. –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è.
//     –ó–∞–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏ –≤—Å–µ –µ–≥–æ –∫–æ–ø–∏–∏ –Ω–∞ —Å–∏–º–≤–æ–ª '*'.
//     –í—ã–≤–µ—Å—Ç–∏ –º–∞—Å—Å–∏–≤ –≤ –∫–æ–Ω—Å–æ–ª—å.
// EN: Create an array with duplicate elements. Find first duplicated element.
//     Replace this element and all its copies with symbol '*'.
//     Display it in the console.

//TODO!

// function isDuplicate(item, cache) {

// }

// function unique(arr) {
//     let result = [];
//     let chache = {}

//     for (let str of arr) {
//     if (!result.includes(str)) {
//     result.push(str);
//     }
//     }

//     return result;
//     }

//     let strings = [1,2,4,2,1,55,77,55,88];

//     console.log( unique(strings) );

// Task 18
// RU: –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ù–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ —Å–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤—ã ‚Äì –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
//     —ç—Ç–∏—Ö –∂–µ —á–∏—Å–µ–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º, –≤–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–º –∏ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º –≤–∏–¥–µ.
//     –í—ã–≤–µ—Å—Ç–∏ —ç—Ç–∏ –º–∞—Å—Å–∏–≤—ã –≤ –∫–æ–Ω—Å–æ–ª—å.
// EN: Create an array of integer numbers. Create 3 new ones on the basis of the originl array.
//     First array contains the binary representation of the elements from the original array.
//     Second array contains the octal representation of the elements from the original array.
//     Third array contains the hexadecimal representation of the elements from the original array.
//     Display them in the console.

// let strings = [1,2,4,2,1,55,77,55,88];

// console.log(strings.map(item => parseInt(item.toString(2))));
// console.log(strings.map(item => parseInt(item.toString(8))));
// console.log(strings.map(item => parseInt(item.toString(16))));


// Task 19
// RU: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ 'a big brown fox jumps over the lazy dog' –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤,
//     –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –¥–ª–∏–Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±–æ–ª—å—à–µ 3 —Å–∏–º–≤–æ–ª–∞.
//     –í—ã–≤–µ—Å—Ç–∏ –º–∞—Å—Å–∏–≤ –≤ –∫–æ–Ω—Å–æ–ª—å.
// EN: Get the array of words from the string 'a big brown fox jumps over the lazy dog'.
//     This array should contain only words, the length of which is 3 or less characters.
//     Display it in the console.

// console.log('a big brown fox jumps over the lazy dog'.split(' ').filter(item=> item.length <= 3));

// Task 20
// RU: –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫–∏ –∏ —á–∏—Å–ª–∞.
//     –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –º–∞—Å—Å–∏–≤ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏.
//     –í—ã–≤–µ—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
// EN: Create an array of numbers and strings.
//     Check whether this array contains only strings.
//     Display the result in the console.

// console.log([1,2,4,2,1,55,77,55,88].every(item => typeof item === 'number'));

// Task 21
// RU: –°–æ–∑–¥–∞—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª.
//     –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é binarySearch(arr, value), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤
//     –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤–µ –∏–ª–∏ -1.
//     –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫.
//     –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.
// EN: Create an array of numbers in sort order.
//     Implement function binarySearch(arr, value), which takes an array
//     and a value and returns the index of this value in the array or -1.
//     Function should use binary search.
//     Display the result in the console.
//TODO!
// function binarySearch(arr, value) {
//     if (!arr || !value) return 'please, pass params to get result';
//     if (arr[arr.length - 1] < value || arr[0] > value) return -1;
//     let middleElem = arr[Math.floor(arr.length / 2)];
//     if (middleElem > value) {
//         binarySearch(arr.slice(middleElem), value)
//     } else if (middleElem < value) {
//         binarySearch(arr.slice(0, middleElem), value)
//     }
//     return middleElem;
// }

// console.log(binarySearch([1,2,4,5,6,7,8,55,88], 4));
// console.log([1,2,4,5,6,7,8,55,88].indexOf(4))


// const task1 = { action: 'Create‚Ä¶' };
// const task2 = { action: 'Delete‚Ä¶' };
// const project = new WeakSet([task1, task2]);
// task1 = null;
// // wait for GC
// console.log(project.has(task1));
// Answer: true


// let User = {
//     name: 'Kate',
//     surname: 'Jhonson', 
//     get fullName() {
//         return `${this.name} ${this.surname}`;
//     },
//     set fullName(value) {
//         [this.name, this.surname] = value.split(' '); 
//     }
// }

// console.log(User.fullName);
// console.log(User.fullName = 'John Catfisher');

// let user = {
//     name: "John",
//     surname: "Smith",

//     set fullName(value) {
//       [this.name, this.surname] = value.split(" ");
//     },

//     get fullName() {
//       return `${this.name} ${this.surname}`;
//     }
//   };

//   let admin = {
//     __proto__: user,
//     isAdmin: true
//   };

//   alert(admin.fullName); // John Smith (*)

//   // —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Ç—Ç–µ—Ä!
//   admin.fullName = "Alice Cooper"; // (**)
//   console.log(admin); // Alice
// //   console.log(user); // Alice

// let hamster = {
//     stomach: [],

//     eat(food) {
//       // –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è this.stomach –≤–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ this.stomach.push
//       this.stomach = [...this.stomach, food];
//     }
//   };

//   let speedy = {
//      __proto__: hamster
//   };

//   let lazy = {
//     __proto__: hamster
//   };

//   // –®—É—Å—Ç—Ä—ã–π —Ö–æ–º—è–∫ –Ω–∞—à—ë–ª –µ–¥—É
//   speedy.eat("apple");
//   speedy.eat("watermelon");
//   alert( speedy.stomach ); // apple

//   // –ñ–∏–≤–æ—Ç –ª–µ–Ω–∏–≤–æ–≥–æ —Ö–æ–º—è–∫–∞ –ø—É—Å—Ç
//   alert( lazy.stomach ); // <–Ω–∏—á–µ–≥–æ>

// let dictionary = Object.create(null);

// –≤–∞—à –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ dictionary.toString

// –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö
// dictionary.apple = "Apple";
// dictionary.__proto__ = "test"; // –∑–¥–µ—Å—å __proto__ -- —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –∫–ª—é—á
//
//
// Object.defineProperty(dictionary, 'toString', {
//     value: function() {
//         return Object.keys(this).join()
//     },
//     // enumerable: false
// })
// // —Ç–æ–ª—å–∫–æ apple –∏ __proto__ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ —Ü–∏–∫–ª–µ
// for(let key in dictionary) {
//     alert(key); // "apple", –∑–∞—Ç–µ–º "__proto__"
//   }
//
//
// // –≤–∞—à –º–µ—Ç–æ–¥ toString –≤ –¥–µ–π—Å—Ç–≤–∏–∏
// alert(dictionary); // "apple,__proto__"